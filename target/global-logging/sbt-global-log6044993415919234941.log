[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Delhaye\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Delhaye\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.0 (Oracle Corporation Java 1.8.0_181)
[debug]       Load.loadUnit: plugins took 439.1656ms
[debug]       Load.loadUnit: defsScala took 0.4985ms
[debug] [Loading] Scanning directory C:\Users\Delhaye\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Delhaye\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 34.6348 ms
[debug]           Load.resolveProject(global-plugins) took 80.0328ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Delhaye\.sbt\1.0\plugins, plugins: List(<none>))) took 156.7441ms
[debug] [Loading] Done in C:\Users\Delhaye\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 193.6585ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4088ms
[debug]     Load.loadUnit(file:/C:/Users/Delhaye/.sbt/1.0/plugins/, ...) took 645.7324ms
[debug]   Load.apply: load took 893.5573ms
[debug]   Load.apply: resolveProjects took 9.2576ms
[debug]   Load.apply: finalTransforms took 92.6503ms
[debug]   Load.apply: config.delegates took 11.9562ms
[debug]   Load.apply: Def.make(settings)... took 1498.4498ms
[debug]   Load.apply: structureIndex took 175.853ms
[debug]   Load.apply: mkStreams took 2.5952ms
[info] loading global plugins from C:\Users\Delhaye\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5991.2037ms
[debug]           Load.loadUnit: plugins took 45.7072ms
[debug]           Load.loadUnit: defsScala took 0.0066ms
[debug] [Loading] Scanning directory C:\Users\Delhaye\Desktop\spark-us-airports\project
[debug]             Load.loadUnit: mkEval took 15.0278ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Delhaye\Desktop\spark-us-airports\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.3812 ms
[info] loading settings for project spark-us-airports-build from idea.sbt ...
[debug]               Load.resolveProject(spark-us-airports-build) took 17.0303ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-us-airports-build, base: C:\Users\Delhaye\Desktop\spark-us-airports\project, plugins: List(<none>))) took 21.2569ms
[debug] [Loading] Done in C:\Users\Delhaye\Desktop\spark-us-airports\project, returning: (spark-us-airports-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3563.7477ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.2632ms
[debug]         Load.loadUnit(file:/C:/Users/Delhaye/Desktop/spark-us-airports/project/, ...) took 3617.2756ms
[debug]       Load.apply: load took 3619.0711ms
[debug]       Load.apply: resolveProjects took 0.1541ms
[debug]       Load.apply: finalTransforms took 13.6715ms
[debug]       Load.apply: config.delegates took 0.8242ms
[debug]       Load.apply: Def.make(settings)... took 109.7926ms
[debug]       Load.apply: structureIndex took 39.9116ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\Delhaye\Desktop\spark-us-airports\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7532.1935ms
[debug]     Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory C:\Users\Delhaye\Desktop\spark-us-airports
[debug]       Load.loadUnit: mkEval took 0.4095ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Delhaye\Desktop\spark-us-airports, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.7672 ms
[info] loading settings for project spark-us-airports from build.sbt ...
[debug]         Load.resolveProject(spark-us-airports) took 57.284ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-us-airports, base: C:\Users\Delhaye\Desktop\spark-us-airports, plugins: List(<none>))) took 63.181ms
[debug] [Loading] Done in C:\Users\Delhaye\Desktop\spark-us-airports, returning: (spark-us-airports)
[debug]     Load.loadUnit: loadedProjectsRaw took 2550.083ms
[debug]     Load.loadUnit: cleanEvalClasses took 30.6731ms
[debug]   Load.loadUnit(file:/C:/Users/Delhaye/Desktop/spark-us-airports/, ...) took 10113.9956ms
[debug] Load.apply: load took 10116.7265ms
[debug] Load.apply: resolveProjects took 0.3198ms
[debug] Load.apply: finalTransforms took 46.7586ms
[debug] Load.apply: config.delegates took 0.5292ms
[debug] Load.apply: Def.make(settings)... took 102.7097ms
[debug] Load.apply: structureIndex took 34.0441ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to spark-us-airports (in build file:/C:/Users/Delhaye/Desktop/spark-us-airports/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63395 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63395, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-us-airports (in build file:/C:/Users/Delhaye/Desktop/spark-us-airports/)
[debug] > Exec(idea-shell, None, None)
