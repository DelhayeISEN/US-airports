[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.0 (Oracle Corporation Java 1.8.0_181)
[debug]       Load.loadUnit: plugins took 414.4186ms
[debug]       Load.loadUnit: defsScala took 0.7306ms
[debug] [Loading] Scanning directory C:\Users\Delhaye\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Delhaye\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 35.3354 ms
[debug]           Load.resolveProject(global-plugins) took 95.231901ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Delhaye\.sbt\1.0\plugins, plugins: List(<none>))) took 203.7205ms
[debug] [Loading] Done in C:\Users\Delhaye\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 268.484299ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.422301ms
[debug]     Load.loadUnit(file:/C:/Users/Delhaye/.sbt/1.0/plugins/, ...) took 699.789701ms
[debug]   Load.apply: load took 969.8684ms
[debug]   Load.apply: resolveProjects took 10.2726ms
[debug]   Load.apply: finalTransforms took 84.911899ms
[debug]   Load.apply: config.delegates took 11.437499ms
[debug]   Load.apply: Def.make(settings)... took 1798.6341ms
[debug]   Load.apply: structureIndex took 259.7703ms
[debug]   Load.apply: mkStreams took 4.4732ms
[info] loading global plugins from C:\Users\Delhaye\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6498.3074ms
[debug]           Load.loadUnit: plugins took 48.1872ms
[debug]           Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.214701 ms
[debug]               Load.resolveProject(spark-us-airports-build) took 1.8457ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-us-airports-build, base: C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports\project, plugins: List(<none>))) took 4.7728ms
[debug] [Loading] Done in C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports\project, returning: (spark-us-airports-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7.157699ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.0155ms
[debug]         Load.loadUnit(file:/C:/Users/Delhaye/Downloads/spark-us-airports/spark-us-airports/project/, ...) took 56.836799ms
[debug]       Load.apply: load took 59.4361ms
[debug]       Load.apply: resolveProjects took 0.155701ms
[debug]       Load.apply: finalTransforms took 14.0114ms
[debug]       Load.apply: config.delegates took 0.7954ms
[debug]       Load.apply: Def.make(settings)... took 137.572799ms
[debug]       Load.apply: structureIndex took 62.5845ms
[debug]       Load.apply: mkStreams took 0.004701ms
[info] loading project definition from C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4678.257501ms
[debug]     Load.loadUnit: defsScala took 0.005301ms
[debug] [Loading] Scanning directory C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports
[debug]       Load.loadUnit: mkEval took 14.4104ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.5231 ms
[info] loading settings for project spark-us-airports from build.sbt ...
[debug]         Load.resolveProject(spark-us-airports) took 4.0629ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-us-airports, base: C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports, plugins: List(<none>))) took 7.5039ms
[debug] [Loading] Done in C:\Users\Delhaye\Downloads\spark-us-airports\spark-us-airports, returning: (spark-us-airports)
[debug]     Load.loadUnit: loadedProjectsRaw took 6499.400699ms
[debug]     Load.loadUnit: cleanEvalClasses took 35.371199ms
[debug]   Load.loadUnit(file:/C:/Users/Delhaye/Downloads/spark-us-airports/spark-us-airports/, ...) took 11214.204701ms
[debug] Load.apply: load took 11217.0873ms
[debug] Load.apply: resolveProjects took 0.1917ms
[debug] Load.apply: finalTransforms took 12.7832ms
[debug] Load.apply: config.delegates took 0.3336ms
[debug] Load.apply: Def.make(settings)... took 194.1358ms
[debug] Load.apply: structureIndex took 37.4699ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to spark-us-airports (in build file:/C:/Users/Delhaye/Downloads/spark-us-airports/spark-us-airports/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] 
[info] Here are some highlights of this release:
[info]   - Build server protocol (BSP) support
[info]   - sbtn: a native thin client for sbt
[info]   - VirtualFile + RemoteCache: caches build artifacts across different machines
[info]   - ThisBuild / versionScheme to take the guessing out of eviction warning
[info] See http://eed3si9n.com/sbt-1.4.0 for full release notes.
[info] Hide the banner for this release by running `skipBanner`.
[info] sbt server started at local:sbt-server-76e0bd2bb2abd82e3db6
